#
#
# Parser.yp
#
# Grammar to parse SExpressions for Data::SExpression
#
#

%{
use Symbol;
use Data::SExpression::Cons;
%}

%%

sexpression: expression			 { $_[0]->YYAccept; return $_[1]; }
;

expression:   NUMBER
            | SYMBOL                     { Symbol::qualify_to_ref($_[1], 'main') }
            | STRING
            | list
            | quoted

;

list:       '(' list_interior ')'        { $_[2] }
;


list_interior:
              expression '.' expression  { Data::SExpression::Cons->new($_[1], $_[3]) }
            | expression list_interior   { Data::SExpression::Cons->new($_[1], $_[2]) }
            | expression                 { Data::SExpression::Cons->new($_[1], undef) }

;

quoted:
              QUOTE expression           { Data::SExpression::Cons->new(Symbol::qualify_to_ref($_[1], "main"),
                                             Data::SExpression::Cons->new($_[2], undef))}
;              

%%

sub _extract_string {
    my $self  = shift;
    my $str =  shift || '';

    $str =~ s/\\"/"/g;
    
    return $str;
}

sub set_input {
    my $self = shift;
    my $input = shift or die(__PACKAGE__ . "::set_input called with 0 arguments");
    $self->YYData->{INPUT} = $input;
}

sub unparsed_input {
    my $self = shift;
    return substr($self->YYData->{INPUT}, pos($self->YYData->{INPUT}));
}

my %quotes = (q{'} => 'quote',
              q{`} => 'quasiquote',
              q{,} => 'unquote');


sub lexer {
    my $self = shift;

    $self->YYData->{INPUT} or return ('', undef);

    my $symbol_char = qr{[*!\$[:alpha:]\?<>=/+-]};

    for($self->YYData->{INPUT}) {
        $_ =~ /\G \s* (?: ; .* \s* )* /gcx;

        /\G ([+-]? \d+ (?:[.]\d*)?) /gcx
        || /\G ([+-]? [.] \d+) /gcx
          and return ('NUMBER', $1);

        /\G ($symbol_char ($symbol_char | \d )*)/gcx
          and return ('SYMBOL', $1);

        /\G " ([^"\\]* (?: \\. [^"\\]*)*) "/gcx
          and return ('STRING', $self->_extract_string($1));

        /\G ([().])/gcx
          and return ($1, $1);

        /\G ([`',]) /gcx
          and return ('QUOTE', $quotes{$1});

        return ('', undef);
    }
}

sub error {
    my $self = shift;
    my ($tok, $val) = $self->YYLexer->($self);
    die("Parse error near: '" . $self->unparsed_input . "'");
    return undef;
}

sub parse {
    my $self = shift;
    return $self->YYParse(yylex => \&lexer, yyerror => \&error);
}
